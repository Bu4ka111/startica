import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import API_KEY_OMDB, PAGE_SIZE  # PAGE_SIZE = 10 –¥–ª—è —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
from keyboards import markup, build_movies_list

WATCHLIST_PAGE_SIZE = 5
FAVORITES_PAGE_SIZE = 5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∏–ª—å–º—ã.\n\n"
        "üé¨ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.\n"
        "üìù –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª –∏ ¬´–ú–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã¬ª!"
    )
    await update.message.reply_text(welcome_text, reply_markup=markup)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movies = []
    for page in range(1, 11):
        url = f'http://www.omdbapi.com/?apikey={API_KEY_OMDB}&s=movie&type=movie&page={page}'
        try:
            response = requests.get(url, timeout=5).json()
        except Exception:
            break
        if response.get('Response') == 'True':
            movies.extend(response.get('Search', []))
        else:
            break

    if not movies:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö.')
        return

    context.user_data['movies'] = movies
    context.user_data['page'] = 0
    await send_movies_page(update, context)

async def send_movies_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = context.user_data.get('page', 0)
    movies = context.user_data.get('movies', [])

    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    movies_page = movies[start_idx:end_idx]

    keyboard = [
        [InlineKeyboardButton(f"{i + 1}. {movie['Title']} ({movie['Year']})", callback_data=movie['imdbID'])]
        for i, movie in enumerate(movies_page, start=start_idx)
    ]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='prev'))
    if end_idx < len(movies):
        nav_buttons.append(InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°', callback_data='next'))
    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)
        await update.callback_query.answer()
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)

async def send_movie_details(update: Update, context: ContextTypes.DEFAULT_TYPE, imdb_id: str):
    url = f"http://www.omdbapi.com/?apikey={API_KEY_OMDB}&i={imdb_id}&plot=full"
    try:
        response = requests.get(url, timeout=5).json()
    except Exception:
        await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.")
        return

    if response.get("Response") != "True":
        await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.")
        return

    title = response.get("Title", "N/A")
    year = response.get("Year", "N/A")
    rating = response.get("imdbRating", "N/A")
    genre = response.get("Genre", "N/A")
    plot = response.get("Plot", "N/A")
    poster = response.get("Poster")

    message = (
        f"*{title}* ({year})\n\n"
        f"*–ñ–∞–Ω—Ä:* {genre}\n"
        f"*–†–µ–π—Ç–∏–Ω–≥ IMDb:* {rating}\n\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:*\n_{plot}_"
    )

    context.user_data['last_movie'] = {
        'imdbID': imdb_id,
        'Title': title,
        'Year': year
    }

    keyboard = InlineKeyboardMarkup([[  
        InlineKeyboardButton("‚ù§Ô∏è –í –ª—é–±–∏–º—ã–µ", callback_data='add_favorites'),
        InlineKeyboardButton("üëÅ –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data='add_watchlist')
    ]])

    if poster and poster != "N/A":
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=poster,
            caption=message,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    else:
        await update.callback_query.message.reply_text(
            text=message,
            parse_mode='Markdown',
            reply_markup=keyboard
        )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è watchlist/favorites —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π


async def send_custom_list_page(update: Update, context: ContextTypes.DEFAULT_TYPE, list_name: str, page_size: int):
    page_key = f"{list_name}_page"
    page = context.user_data.get(page_key, 0)
    user_list = context.user_data.get(list_name, [])

    if not user_list:
        if update.callback_query:
            await update.callback_query.edit_message_text(f"–°–ø–∏—Å–æ–∫ {list_name} –ø—É—Å—Ç.")
        else:
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ {list_name} –ø—É—Å—Ç.")
        return

    start_idx = page * page_size
    end_idx = start_idx + page_size
    page_items = user_list[start_idx:end_idx]

    keyboard = []
    for i, movie in enumerate(page_items, start=start_idx):
        # –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞ - –≤—ã–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
        movie_button = InlineKeyboardButton(
            f"{i + 1}. {movie['Title']} ({movie['Year']})",
            callback_data=movie['imdbID']
        )
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º
        remove_button = InlineKeyboardButton(
            "‚ùå",
            callback_data=f"remove_{list_name}|{movie['imdbID']}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.append([movie_button, remove_button])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'{list_name}_prev'))
    if end_idx < len(user_list):
        nav_buttons.append(InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°', callback_data=f'{list_name}_next'))
    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = f"–ú–æ–∏ {list_name}:"

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
        await update.callback_query.answer()
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup)


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤":
        await top(update, context)
        return

    if text == "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å":
        context.user_data['watchlist_page'] = 0  # —Å–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        await send_custom_list_page(update, context, 'watchlist', WATCHLIST_PAGE_SIZE)
        return

    if text == "–ú–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã":
        context.user_data['favorites_page'] = 0  # —Å–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        await send_custom_list_page(update, context, 'favorites', FAVORITES_PAGE_SIZE)
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == 'next':
        context.user_data['page'] = context.user_data.get('page', 0) + 1
        await send_movies_page(update, context)

    elif data == 'prev':
        context.user_data['page'] = max(context.user_data.get('page', 0) - 1, 0)
        await send_movies_page(update, context)

    elif data == 'add_favorites':
        movie = context.user_data.get('last_movie')
        if movie:
            favorites = context.user_data.setdefault('favorites', [])
            if movie not in favorites:
                favorites.append(movie)
                await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è")
            else:
                await query.answer("–§–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        else:
            await query.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    elif data == 'add_watchlist':
        movie = context.user_data.get('last_movie')
        if movie:
            watchlist = context.user_data.setdefault('watchlist', [])
            if movie not in watchlist:
                watchlist.append(movie)
                await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å' üëÅ")
            else:
                await query.answer("–§–∏–ª—å–º —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'")
        else:
            await query.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    elif data.startswith('remove_favorites|'):
        imdb_id = data.split('|')[1]
        favorites = context.user_data.get('favorites', [])
        context.user_data['favorites'] = [m for m in favorites if m['imdbID'] != imdb_id]
        await query.answer("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        await send_custom_list_page(update, context, 'favorites', FAVORITES_PAGE_SIZE)

    elif data.startswith('remove_watchlist|'):
        imdb_id = data.split('|')[1]
        watchlist = context.user_data.get('watchlist', [])
        context.user_data['watchlist'] = [m for m in watchlist if m['imdbID'] != imdb_id]
        await query.answer("–§–∏–ª—å–º —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'")
        await send_custom_list_page(update, context, 'watchlist', WATCHLIST_PAGE_SIZE)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è watchlist
    elif data == 'watchlist_next':
        context.user_data['watchlist_page'] = context.user_data.get('watchlist_page', 0) + 1
        await send_custom_list_page(update, context, 'watchlist', WATCHLIST_PAGE_SIZE)

    elif data == 'watchlist_prev':
        context.user_data['watchlist_page'] = max(context.user_data.get('watchlist_page', 0) - 1, 0)
        await send_custom_list_page(update, context, 'watchlist', WATCHLIST_PAGE_SIZE)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è favorites
    elif data == 'favorites_next':
        context.user_data['favorites_page'] = context.user_data.get('favorites_page', 0) + 1
        await send_custom_list_page(update, context, 'favorites', FAVORITES_PAGE_SIZE)

    elif data == 'favorites_prev':
        context.user_data['favorites_page'] = max(context.user_data.get('favorites_page', 0) - 1, 0)
        await send_custom_list_page(update, context, 'favorites', FAVORITES_PAGE_SIZE)

    else:
        # –ï—Å–ª–∏ data - imdbID, –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞
        await send_movie_details(update, context, data)
